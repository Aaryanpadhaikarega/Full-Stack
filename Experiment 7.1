const express = require("express");
const app = express();
app.use(express.json());

// --- Logging Middleware ---
app.use((req, res, next) => {
  console.log(`[${new Date().toISOString()}] ${req.method} ${req.url}`);
  next();
});

// --- Bearer Token Authentication Middleware ---
const authenticate = (req, res, next) => {
  const authHeader = req.headers["authorization"];
  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    return res.status(401).json({ message: "Missing or invalid token" });
  }

  const token = authHeader.split(" ")[1];
  // For demonstration, using a static token. Replace with JWT verification for production
  if (token !== "mysecrettoken") {
    return res.status(403).json({ message: "Invalid token" });
  }

  req.user = { id: 1, name: "Demo User" }; // Add user info after token validation
  next();
};

// --- Public Route ---
app.get("/", (req, res) => {
  res.send("Public Route - No Authentication Required");
});

// --- Protected Route ---
app.get("/dashboard", authenticate, (req, res) => {
  res.send(`Welcome ${req.user.name}, this is your dashboard`);
});

// --- Start Server ---
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
