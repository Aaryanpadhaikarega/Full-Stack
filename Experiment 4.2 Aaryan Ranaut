// server.js â€” single-file Student Management System (Node + Express + MongoDB)
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');

const MONGO_URI = process.env.MONGO_URI || 'mongodb://127.0.0.1:27017/student_mgmt_single';
const PORT = process.env.PORT || 3000;

const app = express();
app.use(bodyParser.urlencoded({ extended: true }));

// --- Mongoose model ---
const studentSchema = new mongoose.Schema({
  name: { type: String, required: true },
  age: { type: Number },
  email: { type: String, required: true, unique: true },
  course: { type: String },
  createdAt: { type: Date, default: Date.now }
});
const Student = mongoose.model('Student', studentSchema);

// --- simple HTML layout helpers ---
function layout(title, body) {
  return `<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <title>${title}</title>
  <style>
    body{font-family:Segoe UI,Roboto,Arial;margin:20px}
    table{width:100%;border-collapse:collapse;margin-top:10px}
    th,td{padding:8px;border:1px solid #ddd;text-align:left}
    form.inline{display:inline}
    .btn{padding:6px 10px;margin:2px;border:1px solid #444;border-radius:4px;background:#f3f3f3;cursor:pointer}
    .top{display:flex;justify-content:space-between;align-items:center}
  </style>
</head>
<body>
  <div class="top">
    <h1>${title}</h1>
    <div><a href="/add">Add Student</a> | <a href="/">Home</a></div>
  </div>
  ${body}
</body>
</html>`;
}

// --- routes ---
// list
app.get('/', async (req, res) => {
  try {
    const students = await Student.find().sort({ createdAt: -1 });
    let rows = students.map(s => `
      <tr>
        <td>${escapeHtml(s.name)}</td>
        <td>${escapeHtml(s.email)}</td>
        <td>${s.age ?? '-'}</td>
        <td>${escapeHtml(s.course ?? '-')}</td>
        <td>
          <a class="btn" href="/edit/${s._id}">Edit</a>
          <form class="inline" method="post" action="/delete/${s._id}" onsubmit="return confirm('Delete this student?')">
            <button class="btn" type="submit">Delete</button>
          </form>
        </td>
      </tr>`).join('');
    if (!rows) rows = '<tr><td colspan="5">No students yet.</td></tr>';
    const body = `<table>
      <thead><tr><th>Name</th><th>Email</th><th>Age</th><th>Course</th><th>Actions</th></tr></thead>
      <tbody>${rows}</tbody>
    </table>`;
    res.send(layout('Student Management', body));
  } catch (err) {
    res.status(500).send(layout('Error', `<p>Error: ${escapeHtml(err.message)}</p>`));
  }
});

// show add form
app.get('/add', (req, res) => {
  const body = `
  <form method="post" action="/add">
    <label>Name<br><input name="name" required /></label><br><br>
    <label>Email<br><input name="email" type="email" required /></label><br><br>
    <label>Age<br><input name="age" type="number" /></label><br><br>
    <label>Course<br><input name="course" /></label><br><br>
    <button class="btn" type="submit">Add Student</button>
  </form>`;
  res.send(layout('Add Student', body));
});

// create
app.post('/add', async (req, res) => {
  try {
    const { name, email, age, course } = req.body;
    await Student.create({ name: name?.trim(), email: email?.trim(), age: age ? Number(age) : undefined, course: course?.trim() });
    res.redirect('/');
  } catch (err) {
    const msg = err.code === 11000 ? 'Email already exists.' : err.message;
    res.status(400).send(layout('Add Student - Error', `<p>${escapeHtml(msg)}</p><p><a href="/add">Back</a></p>`));
  }
});

// show edit form
app.get('/edit/:id', async (req, res) => {
  try {
    const student = await Student.findById(req.params.id);
    if (!student) return res.redirect('/');
    const body = `
    <form method="post" action="/edit/${student._id}">
      <label>Name<br><input name="name" required value="${escapeAttr(student.name)}" /></label><br><br>
      <label>Email<br><input name="email" type="email" required value="${escapeAttr(student.email)}" /></label><br><br>
      <label>Age<br><input name="age" type="number" value="${student.age ?? ''}" /></label><br><br>
      <label>Course<br><input name="course" value="${escapeAttr(student.course ?? '')}" /></label><br><br>
      <button class="btn" type="submit">Save</button>
      <a class="btn" href="/">Cancel</a>
    </form>`;
    res.send(layout('Edit Student', body));
  } catch (err) {
    res.status(500).send(layout('Error', `<p>${escapeHtml(err.message)}</p>`));
  }
});

// update
app.post('/edit/:id', async (req, res) => {
  try {
    const { name, email, age, course } = req.body;
    await Student.findByIdAndUpdate(req.params.id, { name: name?.trim(), email: email?.trim(), age: age ? Number(age) : undefined, course: course?.trim() }, { runValidators: true });
    res.redirect('/');
  } catch (err) {
    const msg = err.code === 11000 ? 'Email already exists.' : err.message;
    res.status(400).send(layout('Edit Student - Error', `<p>${escapeHtml(msg)}</p><p><a href="/">Home</a></p>`));
  }
});

// delete
app.post('/delete/:id', async (req, res) => {
  try {
    await Student.findByIdAndDelete(req.params.id);
    res.redirect('/');
  } catch (err) {
    res.status(500).send(layout('Error', `<p>${escapeHtml(err.message)}</p>`));
  }
});

// --- connect and start ---
mongoose.connect(MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => {
    console.log('Connected to MongoDB');
    app.listen(PORT, () => console.log(`Server running on http://localhost:${PORT}`));
  })
  .catch(err => {
    console.error('DB connection error:', err);
    process.exit(1);
  });

// --- small helpers to avoid XSS ---
function escapeHtml(str = '') {
  return String(str)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;')
    .replace(/'/g, '&#39;');
}
function escapeAttr(s = '') { return escapeHtml(s).replace(/\n/g, ' '); }
